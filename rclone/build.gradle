import java.nio.file.Paths

def repository = 'github.com/rclone/rclone'
def goPath = Paths.get(projectDir.absolutePath, 'gopath').toAbsolutePath().toString()

def getCrossCompiler(bin) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')

    def osName = System.properties['os.name'].toLowerCase()
    def osArch = System.properties['os.arch']
    def os
    if (osName.contains('windows')) {
        if(osArch.equals('amd64')) {
            os = "windows-x86_64"
        } else if (osArch.equals('x86')) {
            os = "windows"
        }
    } else if (osName.contains("linux")) {
        os = "linux-x86_64"
    } else if (osName.contains('mac')) {
        os = "darwin-x86_64"
    } else {
        throw new GradleException("Unsupported OS.")
    }

    return Paths.get(
        ndkDir,
        'toolchains',
        'llvm',
        'prebuilt',
        os,
        'bin',
        bin
    )
}

task fetchRclone(type: Exec) {
    mkdir goPath
    environment 'GOPATH', goPath
    commandLine 'go', 'get', '-d', repository
}

task checkoutRclone(type: Exec) {
    dependsOn fetchRclone
    workingDir Paths.get(goPath, "src/${repository}".split('/'))
    commandLine 'git', 'checkout', RCLONE_VERSION
}

task cleanNative {
    enabled = false
    doLast {
        delete '../app/lib/armeabi-v7a/librclone.so'
        delete '../app/lib/arm64-v8a/librclone.so'
        delete '../app/lib/x86/librclone.so'
        delete '../app/lib/x86_64/librclone.so'
    }
}

task buildArm(type: Exec) {
    dependsOn checkoutRclone
    environment 'GOPATH', goPath
    def crossCompiler = getCrossCompiler('armv7a-linux-androideabi21-clang')
    environment 'CC', crossCompiler
    environment 'CC_FOR_TARGET', crossCompiler
    environment 'GOOS', 'android'
    environment 'GOARCH', 'arm'
    environment 'GOARM', '7'
    environment 'CGO_ENABLED', '1'
    commandLine 'go', 'build', '-tags', 'linux', '-o', '../app/lib/armeabi-v7a/librclone.so', repository
}

task buildArm64(type: Exec) {
    dependsOn checkoutRclone
    environment 'GOPATH', goPath
    def crossCompiler = getCrossCompiler('aarch64-linux-android21-clang')
    environment 'CC', crossCompiler
    environment 'CC_FOR_TARGET', crossCompiler
    environment 'GOOS', 'android'
    environment 'GOARCH', 'arm64'
    environment 'CGO_ENABLED', '1'
    commandLine 'go', 'build', '-tags', 'linux', '-o', '../app/lib/arm64-v8a/librclone.so', repository
}

task buildx86(type: Exec) {
    dependsOn checkoutRclone
    environment 'GOPATH', goPath
    def crossCompiler = getCrossCompiler('i686-linux-android21-clang')
    environment 'CC', crossCompiler
    environment 'CC_FOR_TARGET', crossCompiler
    environment 'GOOS', 'android'
    environment 'GOARCH', '386'
    environment 'CGO_ENABLED', '1'
    commandLine 'go', 'build', '-tags', 'linux', '-o', '../app/lib/x86/librclone.so', repository
}

task buildx64(type: Exec) {
    dependsOn checkoutRclone
    environment 'GOPATH', goPath
    def crossCompiler = getCrossCompiler('x86_64-linux-android21-clang')
    environment 'CC', crossCompiler
    environment 'CC_FOR_TARGET', crossCompiler
    environment 'GOOS', 'android'
    environment 'GOARCH', 'amd64'
    environment 'CGO_ENABLED', '1'
    commandLine 'go', 'build', '-tags', 'linux', '-o', '../app/lib/x86_64/librclone.so', repository
}

task buildNative {
    dependsOn buildArm
    dependsOn buildArm64
    dependsOn buildx86
    dependsOn buildx64
}

defaultTasks 'buildNative'
